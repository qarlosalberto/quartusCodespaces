<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:Settings xmlns:ns2="http://www.altera.com/embeddedsw/bsp/schema">
    <Tool>PD-BSP</Tool>
    <BspType>hal2</BspType>
    <BspVersion>default</BspVersion>
    <BspGeneratedTimeStamp>Nov 6, 2023 9:06:02 AM</BspGeneratedTimeStamp>
    <BspGeneratedUnixTimeStamp>1699290362788</BspGeneratedUnixTimeStamp>
    <BspGeneratedLocation>/tmp/arc_1559748900/_0/regtest/exampledesigns/quartus_installer_designs/niosv_m/niosv_pio/sw/niosv_bsp</BspGeneratedLocation>
    <BspSettingsFile>sw/niosv_bsp/settings.bsp</BspSettingsFile>
    <QsysFile>../../hw/qsys_top.qsys</QsysFile>
    <QuartusProjectFile>../../hw/top.qpf</QuartusProjectFile>
    <SystemFileHash>c364e9ff4d3d51d0677184113fd3a795d42e48c2bd16fa24f5a93720c5e2c464</SystemFileHash>
    <JdiFile>default</JdiFile>
    <Cpu>intel_niosv_m_0</Cpu>
    <Setting>
        <SettingName>hal.sys_clk_timer</SettingName>
        <Identifier>ALT_SYS_CLK</Identifier>
        <Type>UnquotedString</Type>
        <Value>intel_niosv_m_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Slave descriptor of the system clock timer device. This device provides a periodic interrupt ("tick") and is typically required for RTOS use. This setting defines the value of ALT_SYS_CLK in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.timestamp_timer</SettingName>
        <Identifier>ALT_TIMESTAMP_CLK</Identifier>
        <Type>UnquotedString</Type>
        <Value>intel_niosv_m_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Slave descriptor of timestamp timer device. This device is used by Altera HAL timestamp drivers for high-resolution time measurement. This setting defines the value of ALT_TIMESTAMP_CLK in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.max_file_descriptors</SettingName>
        <Identifier>ALT_MAX_FD</Identifier>
        <Type>DecimalNumber</Type>
        <Value>32</Value>
        <DefaultValue>32</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Determines the number of file descriptors statically allocated. This setting defines the value of ALT_MAX_FD in system.h.</Description>
        <Restrictions>If hal.enable_lightweight_device_driver_api is true, there are no file descriptors so this setting is ignored. If hal.enable_lightweight_device_driver_api is false, this setting must be at least 4 because HAL needs a file descriptor for /dev/null, /dev/stdin, /dev/stdout, and /dev/stderr.</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.enable_instruction_related_exceptions_api</SettingName>
        <Identifier>ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Enables API for registering handlers to service instruction-related exceptions. Enabling this setting increases the size of the exception entry code.</Description>
        <Restrictions>These exception types can be generated if various processor options are enabled, such as the MMU, MPU, or other advanced exception types.</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.use_dfl_walker</SettingName>
        <Identifier>INTEL_FPGA_USE_DFL_WALKER</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Determines whether to include the DFL walker code in fpga_platform_init() to discover interface information to use fpga_open() to obtain a handle.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.dfl_start_address</SettingName>
        <Identifier>INTEL_FPGA_DFL_START_ADDRESS</Identifier>
        <Type>DecimalNumber</Type>
        <Value>-1</Value>
        <DefaultValue>-1</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Start address of DFL for DFL walker to read.</Description>
        <Restrictions>If hal.use_dfl_walker is false, this setting is ignored; If hal.use_dfl_walker is true, this setting must match the base address of the DFL ROM instance that specifies the system.</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.allow_code_at_reset</SettingName>
        <Identifier>ALT_ALLOW_CODE_AT_RESET</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Indicates if initialization code is allowed at the reset address. If true, defines the macro ALT_ALLOW_CODE_AT_RESET in linker.h.</Description>
        <Restrictions>If true, defines the macro ALT_ALLOW_CODE_AT_RESET in linker.h. This setting is typically false if an external bootloader (e.g. flash bootloader) is present.</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.enable_alt_load</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enables the alt_load() facility. The alt_load() facility copies data sections (.rodata, .rwdata, or .exceptions) from boot memory to RAM. If true, this setting sets up the VMA/LMA of sections in linker.x to allow them to be loaded into the .text memory.</Description>
        <Restrictions>This setting is typically false if an external bootloader (e.g. flash bootloader) is present.</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.enable_alt_load_copy_rodata</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Causes the alt_load() facility to copy the .rodata section. If true, this setting defines the macro ALT_LOAD_COPY_RODATA in linker.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.enable_alt_load_copy_rwdata</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Causes the alt_load() facility to copy the .rwdata section. If true, this setting defines the macro ALT_LOAD_COPY_RWDATA in linker.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.enable_alt_load_copy_exceptions</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Causes the alt_load() facility to copy the .exceptions section. If true, this setting defines the macro ALT_LOAD_COPY_EXCEPTIONS in linker.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.linker.enable_exception_stack</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enables use of a separate exception stack. If true, defines the macro ALT_EXCEPTION_STACK in linker.h, adds a memory region called exception_stack to linker.x, and provides the symbols __alt_exception_stack_pointer and __alt_exception_stack_limit in linker.x.</Description>
        <Restrictions>The hal.linker.exception_stack_size and hal.linker.exception_stack_memory_region_name settings must also be valid. This setting must be false for MicroC/OS-II BSPs. The exception stack can be used to improve interrupt and other exception performance if the EIC is *not* used.</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.linker.exception_stack_size</SettingName>
        <Identifier>none</Identifier>
        <Type>DecimalNumber</Type>
        <Value>1024</Value>
        <DefaultValue>1024</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Size of the exception stack in bytes.</Description>
        <Restrictions>Only used if hal.linker.enable_exception_stack is true.</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.linker.exception_stack_memory_region_name</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>intel_onchip_memory_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Name of the existing memory region that will be divided up to create the 'exception_stack' memory region. The selected region name will be adjusted automatically when the BSP is generated to create the 'exception_stack' memory region.</Description>
        <Restrictions>Only used if hal.linker.enable_exception_stack is true.</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.linker.use_picolibc</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Use Picolibc in place of Newlib to provide C library support</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.stdin</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>jtag_uart_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Slave descriptor of STDIN character-mode device. This setting is used by the ALT_STDIN family of defines in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.stdout</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>jtag_uart_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Slave descriptor of STDOUT character-mode device. This setting is used by the ALT_STDOUT family of defines in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.stderr</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>jtag_uart_0</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Slave descriptor of STDERR character-mode device. This setting is used by the ALT_STDERR family of defines in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.log_port</SettingName>
        <Identifier>ALT_LOG_ENABLE</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Slave descriptor of debug logging character-mode device. If defined, it enables extra debug messages in the HAL source. This setting is used by the ALT_LOG_PORT family of defines in system.h.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.prefix</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-</Value>
        <DefaultValue>riscv32-unknown-elf-</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Prefix to be used for toolchain executables. The value will affect the individual values of the archiver, assembler, compiler, and linker - specifically, it will affect the settings toolchain.ar, toolchain.as, toolchain.cc, toolchain.cxx, and toolchain.objdump. The value will be used like so: ${toolchain.prefix}gcc, ${toolchain.prefix}objdump, etc. However, if the override setting toolchain.enable_executable_overrides is enabled, the individual settings toolchain.ar, toolchain.as, toolchain.cc, toolchain.cxx, and toolchain.objdump may be set to custom values and will not be derived from this setting's value. The 'riscv32-unknown-elf' toolchain is available with the RiscFree IDE for Intel FPGAs. Users must install the RiscFree IDE for Intel FPGAs to use this toolchain.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.enable_executable_overrides</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enable custom values to be set for the toolchain executables - the settings toolchain.ar, toolchain.as, toolchain.cc, toolchain.cxx, and toolchain.objdump can be set to custom values.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.ar</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-ar</Value>
        <DefaultValue>riscv32-unknown-elf-ar</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Archiver command. Creates library files from object files. If ${toolchain.enable_executable_overrides} is true, this setting's value will override the default value of ${toolchain.prefix}ar.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.as</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-gcc</Value>
        <DefaultValue>riscv32-unknown-elf-gcc</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Assembler command. Note that GCC is used by default so that .S files are run through the C pre-processor. If ${toolchain.enable_executable_overrides} is true, this setting's value will override the default value of ${toolchain.prefix}gcc.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.cc</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-gcc</Value>
        <DefaultValue>riscv32-unknown-elf-gcc</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>C compiler command. If ${toolchain.enable_executable_overrides} is true, this setting's value will override the default value of ${make.toolchain_prefix}gcc.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.cxx</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-g++</Value>
        <DefaultValue>riscv32-unknown-elf-g++</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>C++ compiler command. If ${toolchain.enable_executable_overrides} is true, this setting's value will override the default value of ${toolchain.prefix}g++.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.toolchain.objdump</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>riscv32-unknown-elf-objdump</Value>
        <DefaultValue>riscv32-unknown-elf-objdump</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Objdump command. If ${toolchain.enable_executable_overrides} is true, this setting's value will override the default value of ${toolchain.prefix}objdump.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.asflags</SettingName>
        <Identifier>ASFLAGS</Identifier>
        <Type>UnquotedString</Type>
        <Value>-Wa,-gdwarf2</Value>
        <DefaultValue>-Wa,-gdwarf2</DefaultValue>
        <DestinationFile>makefile_variable</DestinationFile>
        <Description>Custom flags only passed to the assembler.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_debug</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>-g</Value>
        <DefaultValue>-g</DefaultValue>
        <DestinationFile>makefile_variable</DestinationFile>
        <Description>This setting defines flags used by the compiler for when CMAKE_BUILD_TYPE=Debug, which is the default build type. '-g' provides the default set of debug symbols typically required to debug a typical application.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_optimization</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>-O2</Value>
        <DefaultValue>-O2</DefaultValue>
        <DestinationFile>makefile_variable</DestinationFile>
        <Description>This setting defines the flags used by the compiler for CMAKE_BUILD_TYPE=Release. "-O0" = no optimization,"-O2" = "normal" optimization, etc. "-O0" is recommended for code that you want to debug since compiler optimization can remove variables and produce non-sequential execution of code while debugging.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_warnings</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>-Wall -Wformat-security</Value>
        <DefaultValue>-Wall -Wformat-security</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>C/C++ compiler warning level. "-Wall" is commonly used. "-Wformat-security" warns about calls to "printf" and "scanf" functions where the format string is not a string literal and there are no format arguments. This setting defines warn flags that are always used by the compiler.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_user_flags</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Custom flags passed to the compiler when compiling C, C++, and .S files. This setting defines flags that are always used by the compiler.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_defined_symbols</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Preprocessor macros to define. A macro definition in this setting has the same effect as a "#define" in source code. Adding "-DALT_DEBUG" to this setting has the same effect as "#define ALT_DEBUG" in a souce file. Adding "-DFOO=1" to this setting is equivalent to the macro "#define FOO 1" in a source file. Macros defined with this setting are applied to all .S, .c, and C++ files.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.cflags_undefined_symbols</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Preprocessor macros to undefine. Undefined macros are similar to defined macros, but replicate the "#undef" directive in source code. To undefine the macro FOO use the syntax "-u FOO" in this setting. This is equivalent to "#undef FOO" in a source file. Note: the syntax differs from macro definition (there is a space, i.e. "-u FOO" versus "-DFOO"). Macros defined with this setting are applied to all .S, .c, and C++ files.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.cxx_flags</SettingName>
        <Identifier>CXXFLAGS</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>makefile_variable</DestinationFile>
        <Description>Custom flags only passed to the C++ compiler.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.link_flags</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>none</Value>
        <DefaultValue>none</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Linker flags.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.objdump_flags</SettingName>
        <Identifier>none</Identifier>
        <Type>UnquotedString</Type>
        <Value>-Sdtx</Value>
        <DefaultValue>-Sdtx</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Objdump flags.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.make.enable_cflag_fstack_protector_strong</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enable the fstack-protector-strong compiler flag.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.make.enable_cflag_wformat_security</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enable the Wformat and Wformat-security compiler flags.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.enable_exit</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Add exit() support. This option increases code footprint if your "main()" routine does "return" or call "exit()". If false, defines ALT_NO_EXIT and reduces footprint.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.enable_clean_exit</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>When your application exits, close file descriptors, call C++ destructors, etc. Code footprint can be reduced by disabling clean exit. If disabled, defines ALT_NO_CLEAN_EXIT and adds -D'exit(a)=_exit(a)' to compile options.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>hal.enable_runtime_stack_checking</SettingName>
        <Identifier>ALT_STACK_CHECK</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Turns on HAL runtime stack checking feature. Enabling this setting causes heap memory allocation to check for potential stack collisions.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.enable_c_plus_plus</SettingName>
        <Identifier>none</Identifier>
        <Type>Boolean</Type>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <DestinationFile>none</DestinationFile>
        <Description>Enable support for a subset of the C++ language. This option increases code footprint by adding support for C++ constructors. Certain features, such as multiple inheritance and exceptions are not supported. If false, adds -DALT_NO_C_PLUS_PLUS to ALT_CPPFLAGS in public.mk, and reduces code footprint.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.enable_reduced_device_drivers</SettingName>
        <Identifier>ALT_USE_SMALL_DRIVERS</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Certain drivers are compiled with reduced functionality to reduce code footprint. Not all drivers observe this setting. The altera_avalon_uart and altera_avalon_jtag_uart drivers switch from interrupt-driven to polled operation. CAUTION: Several device drivers are disabled entirely. These include the altera_avalon_cfi_flash, altera_avalon_epcs_flash_controller, and altera_avalon_lcd_16207 drivers. This can result in certain API (HAL flash access routines) to fail. You can define a symbol provided by each driver to prevent it from being removed. If true, defines ALT_USE_SMALL_DRIVERS.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.enable_lightweight_device_driver_api</SettingName>
        <Identifier>ALT_USE_DIRECT_DRIVERS</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Enables lightweight device driver API. This reduces code and data footprint by removing the HAL layer that maps device names (e.g. /dev/uart0) to file descriptors. Instead, driver routines are called directly. The open(), close(), and lseek() routines will always fail if called. The read(), write(), fstat(), ioctl(), and isatty() routines only work for the stdio devices. If true, defines ALT_USE_DIRECT_DRIVERS.</Description>
        <Restrictions>The Altera Host and read-only ZIP file systems can't be used if hal.enable_lightweight_device_driver_api is true.</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>hal.enable_sim_optimize</SettingName>
        <Identifier>ALT_SIM_OPTIMIZE</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>The BSP is compiled with optimizations to speedup HDL simulation such as initializing the cache, clearing the .bss section, and skipping long delay loops. If true, defines ALT_SIM_OPTIMIZE.</Description>
        <Restrictions>When this setting is true, the BSP shouldn't be used to build applications that are expected to run real hardware.</Restrictions>
        <Enabled>false</Enabled>
        <Group>common</Group>
    </Setting>
    <Setting>
        <SettingName>hal.log_flags</SettingName>
        <Identifier>ALT_LOG_FLAGS</Identifier>
        <Type>DecimalNumber</Type>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>The value is assigned to ALT_LOG_FLAGS in the generated public.mk. See hal.log_port setting description. Values can be -1 through 3.</Description>
        <Restrictions>hal.log_port must be set for this to be used.</Restrictions>
        <Enabled>false</Enabled>
        <Group>none</Group>
    </Setting>
    <Setting>
        <SettingName>intel_niosv_m_hal_driver.internal_timer_ticks_per_sec</SettingName>
        <Identifier>NIOSV_INTERNAL_TIMER_TICKS_PER_SECOND</Identifier>
        <Type>DecimalNumber</Type>
        <Value>1000</Value>
        <DefaultValue>1000</DefaultValue>
        <DestinationFile>system_h_define</DestinationFile>
        <Description>Sets the tick rate in ticks per second for the internal timer.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>altera_avalon_jtag_uart_driver.enable_small_driver</SettingName>
        <Identifier>ALTERA_AVALON_JTAG_UART_SMALL</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Small-footprint (polled mode) driver</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <Setting>
        <SettingName>altera_avalon_jtag_uart_driver.enable_jtag_uart_ignore_fifo_full_error</SettingName>
        <Identifier>ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR</Identifier>
        <Type>BooleanDefineOnly</Type>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <DestinationFile>public_mk_define</DestinationFile>
        <Description>Enable JTAG UART driver to recover when host is inactive causing buffer to full without returning error. Printf will not fail with this recovery.</Description>
        <Restrictions>none</Restrictions>
        <Enabled>false</Enabled>
    </Setting>
    <MemoryMap>
        <slaveDescriptor>intel_onchip_memory_0</slaveDescriptor>
        <addressRange>0x00000000 - 0x000FFFFF</addressRange>
        <addressSpan>1048576</addressSpan>
        <attributes>memory</attributes>
    </MemoryMap>
    <MemoryMap>
        <slaveDescriptor>pio_0</slaveDescriptor>
        <addressRange>0x00110040 - 0x0011004F</addressRange>
        <addressSpan>16</addressSpan>
        <attributes></attributes>
    </MemoryMap>
    <MemoryMap>
        <slaveDescriptor>jtag_uart_0</slaveDescriptor>
        <addressRange>0x00110050 - 0x00110057</addressRange>
        <addressSpan>8</addressSpan>
        <attributes>printable</attributes>
    </MemoryMap>
    <MemoryMap>
        <slaveDescriptor>sysid_qsys_0</slaveDescriptor>
        <addressRange>0x00110058 - 0x0011005F</addressRange>
        <addressSpan>8</addressSpan>
        <attributes></attributes>
    </MemoryMap>
    <LinkerSection>
        <sectionName>.text</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.exceptions</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.rodata</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.rwdata</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.bss</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.heap</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
    <LinkerSection>
        <sectionName>.stack</sectionName>
        <regionName>intel_onchip_memory_0</regionName>
        <noLoad>false</noLoad>
    </LinkerSection>
</ns2:Settings>
