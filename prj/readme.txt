Vendor: Intel
QPDS Version: 23.4
Date Created: 26-DEC-2023

Example designs readme file

Board: Intel Agilex 7 F-Series FPGA Development Kit DK-DEV-AGF014EA
FPGA Part number: AGFB014R24B2E2V

The readme file contains:

1. Directory structure
2. Using existing files (sof and elf) to run on hardware
3. Building the design from scratch
    a.	Required directory structure
    b.	Use of build_sof.py to compile the design
    c.	Steps to create the bsp and build software sources
    d.  Hardware Validation 

1. Directory Structure:

The directory structure of this top-level project folder is explained below:

Example Design Project (<>.qar)
|
|---readme.txt 
|
|---hw (This folder contains files neccessary to run the quartus project)
|   |   <>.qpf
|   |   <>.qsf
|   |   <>.sv
|   |   <>.qsys
|   |   *.ip
|   |   *.v
|   |
|   |---output_files (This folder consists of output files generated by this project)
|       |   <>.sof
|       |   ...
|   
|   |---ip (This folder contains the pre-configured parameter configurations of IPs used in design)
|       |
|       |---presets
|       |   ...
|   
|---sw (This folder contains software application files)
|   |   
|   |---app
|       |   <>.c
|       |   
|       |---build
|           |   <>.elf
|   
|---scripts (This folder consists of scripts to build the design)
|   |   *quartus_project.tcl
|   |   *qsys.tcl
|   |   build_sof.py
|
|---custom_logic (This folder contains custom-user IPs/ Subsystems)
|   |   <>.sv
|   |   <>_hw.tcl
|
|---ready_to_test (This folder contains binaries to validate the design on hardware)
|   |   <>.elf
|   |   <>.sof

2. Using existing files to run the design on hardware

    - The sof and elf files required to run the design can be found in "ready_to_test" folder 
    - Program the sof and download the elf file on board

3. Building the design from scratch

The steps to build the project from scratch are mentioned below:

a. Required directory structure
    - The top-level project folder should have directory structure as mentioned in Section 1 (Directory Structure).

b. Using build_sof.py to compile the design
    - Invoke the quartus_py shell in the terminal
    - Run the following command in the terminal from top level project directory:
        > quartus_py scripts/build_sof.py
    - The quartus tool will compile the design and generate the output files

c. Creating the bsp, build software sources and download elf
    - To create software app with HAL OS, run the following commands in the terminal:
        > niosv-bsp -c --quartus-project=hw/<>.qpf --qsys=hw/<>.qsys --type=hal sw/bsp/settings.bsp
        > niosv-app --bsp-dir=sw/bsp --app-dir=sw/app --srcs=sw/app/<>.c
        > niosv-shell
        > cmake -S ./sw/app -G "Unix Makefiles" -B sw/app/build
        > make -C sw/app/build

d. Hardware Validation
    - Program the generated sof and then download the elf file on the board
        > quartus_pgm --cable=1 -m jtag -o 'p;ready_to_test/<top_level_entity_name>.sof'
    - Download the elf file on the board
        > niosv-download -g ready_to_test/<>.elf -c 1
    - Verify the output on the terminal by using the following command in the terminal:
        > juart-terminal -c 1 -i 0
